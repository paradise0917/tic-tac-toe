{"version":3,"sources":["store/globalContext.js","components/Navbar.js","components/Cell.js","components/Line.js","components/Game.js","components/Player.js","components/Result.js","components/Mask.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","AppContextProvider","props","useState","maskVisibility","setMask","initialBlockVisibility","setInitialBlockVisibility","firstPlayer","setFirstPlayerName","secondPlayer","setSecondPlayerName","winnerMark","winnerInfo","setWinnerInfo","resultBlockVisibility","setresultBlockVisibility","Provider","value","setMaskVisibility","state","setInitialVisibility","setFirstPlayer","name","setSecondPlayer","setResultVisibility","children","Navbar","className","Component","Cell","click","update","index","icon","this","mark","path","mdiCircleOutline","title","color","size","mdiClose","onClick","Line","startX","startIndex","endX","endIndex","startY","Math","floor","endY","x1","y1","x2","y2","Game","round","marks","winner","componentWillUnmount","initGame","setState","updateMark","preState","checkWinner","setTimeout","context","y","x","restartGame","i","cells","map","item","key","push","contextType","Player","renderView","componentDidUpdate","startGame","showPlayer","type","maxLength","placeholder","onChange","e","target","Result","resultStyle","playerName","playerMark","src","alt","Mask","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62e29077.chunk.js","sourcesContent":["import React,{ createContext, useState } from \"react\";\n\n\nconst AppContextProvider = (props) => {\n\n    // background mask\n    const [maskVisibility, setMask] = useState(true);\n    const setMaskVisibility = (state) => {\n        setMask(state);\n    };\n\n    // initial block\n    const [initialBlockVisibility, setInitialBlockVisibility] = useState(true);\n    const setInitialVisibility = (state) => {\n        setInitialBlockVisibility(state);\n    };\n\n    // player information\n    const [firstPlayer, setFirstPlayerName] = useState(\"Player 1\");\n    const setFirstPlayer = (name) => {\n        setFirstPlayerName(name);\n    };\n    const [secondPlayer, setSecondPlayerName] = useState(\"Player 2\");\n    const setSecondPlayer = (name) => {\n        setSecondPlayerName(name);\n    };\n\n    // winner inforamtion\n    const [winnerInfo, setWinnerInfo] = useState({winnerMark: \"\"});\n\n    // result block\n    const [resultBlockVisibility, setresultBlockVisibility] = useState(false);\n    const setResultVisibility = (state) => {\n        setresultBlockVisibility(state);\n    };\n\n    return (\n        <AppContext.Provider value={{ \n            // Mask\n            maskVisibility, setMaskVisibility,\n            // Player\n            initialBlockVisibility, setInitialVisibility,\n            firstPlayer, setFirstPlayer,\n            secondPlayer, setSecondPlayer,\n            // Winner\n            winnerInfo, setWinnerInfo,\n            // Result\n            resultBlockVisibility, setResultVisibility,\n        }}>\n        {props.children}\n        </AppContext.Provider>);\n}\n\nexport const AppContext = createContext();\nexport default AppContextProvider;","import React, { Component } from \"react\";\n\nimport \"../css/navbar.scss\";\n\nclass Navbar extends Component {\n\n    render(){\n        return (\n            <div className=\"navbar flex flex-hor-center\">\n                <div className=\"wrapper\">\n                    <ul className=\"flex flex-ver-center\">\n                        <li><span className=\"title\">Tic Tac Toe</span></li>\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Navbar;","import React, { Component } from \"react\";\n\nimport Icon from \"@mdi/react\";\nimport { mdiCircleOutline, mdiClose } from \"@mdi/js\";\n\nclass Cell extends Component{\n\n    click = () => {\n        this.props.update(this.props.index);\n    }\n\n    render(){\n    \tlet icon = 0;\n    \t// -1: empty, 0: circle, 1: fork\n    \tswitch(this.props.mark){\n    \tcase 0:\n    \t\ticon = <Icon path={mdiCircleOutline}\n    \t\t\ttitle=\"circle\"\n    \t\t\tclassName=\"icon\"\n    \t\t\tcolor=\"rgb(46,167,192)\"\n    \t\t\tsize={2.0}/>;\n    \t\tbreak;\n    \tcase 1:\n    \t\ticon = <Icon path={mdiClose}\n    \t\t\ttitle=\"fork\"\n    \t\t\tclassName=\"icon\"\n    \t\t\tcolor=\"rgb(46,115,202)\"\n    \t\t\tsize={2.5}/>;\n    \t\tbreak;\n    \tdefault:\n    \t\ticon = \"\";\n    \t\tbreak;\n    \t}\n    \treturn (<div className=\"cell\" onClick={this.click}>\n    \t\t<div className=\"flex flex-ver-center flex-hor-center\">{icon}</div>\n    \t</div>);\n    }\n}\n\n\nexport default Cell;","import React, { Component } from \"react\";\n\n/*\n * Base on startIndex and endIndex draw the winner line\n */\nclass Line extends Component{\n\n    render(){\n\n        const startX = this.props.startIndex % 3;\n        const endX = this.props.endIndex % 3;\n        const startY = Math.floor(this.props.startIndex / 3);\n        const endY = Math.floor(this.props.endIndex / 3);\n\n        return (<svg className=\"win-line\">\n            <line x1={startX * 100 + 50} \n                y1={startY * 100 + 50} \n                x2={endX * 100 + 50} \n                y2={endY * 100 + 50} />\n        </svg>);\n    }\n\n}\nexport default Line;","import React, { Component } from \"react\";\nimport { AppContext } from \"../store/globalContext\";\n\nimport Cell from \"./Cell\";\nimport Line from \"./Line\";\n\nimport \"../css/game.scss\";\n\nclass Game extends Component {\n\n    static contextType = AppContext;\n    state = {\n        round: 0, \n        marks: [-1, -1, -1, -1, -1, -1, -1, -1, -1],\n        winner: null \n    }\n\n    componentWillUnmount = () => {\n        this.initGame();\n    }\n\n    initGame = () => {\n        this.setState({\n            round: 0, \n            marks: [-1, -1, -1, -1, -1, -1, -1, -1, -1],\n            winner: null \n        });\n    }\n\n    /* Update content mark based on index\n     * Step1. check mark and prestate have no winner\n     * Step2. end the game if there is a winner after updating the mark\n     * Step3. end the game if there is round game\n     */\n    updateMark = (index) => {\n\n        let currentMark = this.state.marks[index];\n        if(currentMark === -1 && this.state.winner === null) {\n\n            this.setState(preState => {\n                const mark = preState.round % 2; // base on round to check mark content\n                preState.marks[index] = mark;\n                const winner = this.checkWinner(preState.marks); \n\n                if( winner !== null){\n                    setTimeout(() => {\n                        this.context.setWinnerInfo({winnerMark: winner.winnerMark});\n                        this.context.setMaskVisibility(true);\n                        this.context.setResultVisibility(true);\n                    },500);\n                }\n\n                if(preState.round >= 8){\n                    setTimeout(() => {\n                        this.context.setWinnerInfo({winnerMark: -1});\n                        this.context.setMaskVisibility(true);\n                        this.context.setResultVisibility(true);\n                    },500);   \n                }\n\n                return {\n                    round: preState.round + 1,\n                    marks: preState.marks,\n                    winner: winner\n                };\n            });\n        }\n    }\n\n    /* Check have winner\n     * Have winner: return {winnerMark, startIndex, endIndex}\n     * Have no winner: return null\n     */\n    checkWinner = (marks) => {\n    \n        // check three row have same mark\n        for(let y = 0 ; y < 3 ; y++) {\n            if(marks[y*3] !== -1 && marks[y*3] === marks[y*3+1] && marks[y*3+1] === marks[y*3+2]){\n                return {winnerMark: marks[y*3], startIndex: y*3, endIndex: y*3+2};\n            }\n        }\n\n        // check three column have same mark\n        for(let x = 0 ; x < 3 ; x++) {\n            if(marks[x] !== -1 && marks[x] === marks[3+x] && marks[3+x] === marks[2*3+x]){\n                return {winnerMark: marks[x], startIndex:x, endIndex:2*3+x};\n            }\n        }\n\n        // check slash have same mark\n        if(marks[0] !== -1 && marks[0] === marks[4] && marks[4] === marks[8]) {\n            return {winnerMark: marks[0], startIndex:0, endIndex: 8};\n        }else if( marks[2]!==-1 && marks[2] === marks[4] && marks[4] === marks[6]) {\n            return {winnerMark: marks[2], startIndex:2, endIndex: 6};\n        }\n        \n        return null;\n    }\n\n    restartGame = () => {\n        this.context.setMaskVisibility(true);\n        this.context.setInitialVisibility(true);\n    }\n\n    render(){\n\n        let i = -1;\n        let cells = [];\n        cells = this.state.marks.map(item => {\n            i++;\n            return (<Cell key={i} index={i} mark={item} update={this.updateMark} />);\n        }\n        );\n\n        if(this.state.winner !== null){\n            cells.push(<Line key=\"line\" \n                startIndex={this.state.winner.startIndex}\n                endIndex={this.state.winner.endIndex} />);\n        }\n        return (\n            <div className=\"game flex flex-hor-center flex-ver-center\">\n                <div className=\"wrapper flex flex-hor-center flex-ver-center\">\n                    <div className=\"line row row-first\"></div>\n                    <div className=\"line row row-second\"></div>\n                    <div className=\"line col col-first\"></div>\n                    <div className=\"line col col-second\"></div>\n                    <div className=\"board\">{cells}</div>\n                    <button className=\"btn-restart\" onClick={this.restartGame}>RESTART</button>\n                </div>\n            </div>);\n    }\n}\nexport default Game;","import React, { Component } from \"react\";\nimport { AppContext } from \"../store/globalContext\";\n// Components\nimport Game from \"./Game\";\n// Style\nimport Icon from \"@mdi/react\";\nimport { mdiCircleOutline, mdiClose } from \"@mdi/js\";\nimport \"../css/player.scss\";\n\nclass Player extends Component {\n\n    static contextType = AppContext;\n    state = {\n        renderView: \"player\" //player, game\n    }\n\n    componentDidUpdate = () => {\n        if(this.context.initialBlockVisibility === true && this.state.renderView === \"game\"){\n            this.setState({\n                renderView: \"player\"\n            });\n        }\n    }\n\n    /*\n     * START GAME\n     * Stpe1. Close the initial block\n     * Step2. Show the game content\n     */\n    startGame = () => {\n        // 1.\n        this.context.setMaskVisibility(false);\n        this.context.setInitialVisibility(false);\n        // 2.\n        this.setState({\n            renderView: \"game\"\n        });\n        \n    };\n\n    render(){\n\n        if(this.state.renderView === \"player\"){\n            const showPlayer = this.context.initialBlockVisibility === true ? \"player flex flex-ver-center flex-flow-col\" : \"is-hidden-opacity\";\n            return (\n                <div className={showPlayer}>\n                    <div className=\"title\"> Tic Tac Toe</div>\n                    <div className=\"player-name flex\">\n                        <Icon path={mdiCircleOutline}\n                            title=\"Player 1\"\n                            className=\"icon icon-first\"\n                            color=\"rgb(46,167,192)\"\n                            size={1}/>\n                        <input type=\"textbox\" \n                            maxLength=\"8\"\n                            placeholder=\"First Player Name\"\n                            value={this.context.firstPlayer} \n                            onChange={(e) => {this.context.setFirstPlayer(e.target.value);}}></input>\n                    </div>\n                    <div className=\"player-name flex\">\n                        <Icon path={mdiClose}\n                            title=\"Player 2\"\n                            className=\"icon\"\n                            color=\"rgb(46,115,202)\"\n                            size={1.2}/>\n                        <input type=\"textbox\" \n                            maxLength=\"8\"\n                            placeholder=\"Second Player Name\"\n                            value={this.context.secondPlayer} \n                            onChange={(e) => {this.context.setSecondPlayer(e.target.value);}}></input>\n                    </div>\n                    <button className=\"btn-start\" onClick={this.startGame}>START</button>\n                </div>\n            );\n        }else{\n            return (<Game />);\n        }\n\n        \n    }\n}\n\nexport default Player;","import React, { Component } from \"react\";\nimport { AppContext } from \"../store/globalContext\";\n\nimport Icon from \"@mdi/react\";\nimport { mdiCircleOutline, mdiClose } from \"@mdi/js\";\nimport \"../css/result.scss\";\n\nclass Result extends Component {\n\n    static contextType = AppContext;\n    restartGame = () => {\n        this.context.setResultVisibility(false);\n        this.context.setInitialVisibility(true);\n    };\n\n    render(){\n\n        const resultStyle = this.context.resultBlockVisibility === true ? \"result flex flex-ver-center flex-flow-col\" : \"is-hidden-opacity\";\n        const winnerMark = this.context.winnerInfo.winnerMark;\n        let playerName = \"\";\n        let playerMark = \"\";\n        switch(winnerMark){\n        case 0:\n            playerName = this.context.firstPlayer;\n            playerMark = <Icon path={mdiCircleOutline} title=\"Player 1\" className=\"icon\" color=\"rgb(46,167,192)\" size={1.6}/>;\n            break;\n        case 1:\n            playerName = this.context.secondPlayer;\n            playerMark = <Icon path={mdiClose} title=\"Player 2\" className=\"icon\" color=\"rgb(46,115,202)\" size={1.6}/>;\n            break;\n        default:\n            playerName = \"Drawn Game\";\n            break;\n        }\n\n        return(<div className={resultStyle}>\n            <div className=\"title\">YOU WIN</div>\n            <img className=\"winner-img\" src=\"./imgs/win.png\" alt=\"winner\"></img>\n            <div className=\"winner\">{playerName}</div>\n            <div className=\"winner-mark\">{playerMark}</div>\n            <button className=\"btn\" onClick={this.restartGame}>Play Again</button>\n        </div>);\n\n    }\n\n\n}\nexport default Result;","import React, { Component } from \"react\";\nimport { AppContext } from \"../store/globalContext\";\n\nimport \"../css/mask.scss\";\n\nclass Mask extends Component {\n\n    static contextType = AppContext;\n\n    render(){\n        return (\n            <div className={this.context.maskVisibility === true ? \"mask\" : \"is-hidden-opacity\"}></div>\n        );\n    }\n}\n\nexport default Mask;","import React, { Component } from \"react\";\nimport AppContextProvider from \"./store/globalContext\";\n\nimport Navbar from \"./components/Navbar\";\nimport Player from \"./components/Player\";\nimport Result from \"./components/Result\";\nimport Mask from \"./components/Mask\";\n\nimport \"./css/normalize.scss\";\nimport \"./css/common.scss\";\n\nclass App extends Component {\n\trender(){\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<AppContextProvider>\n\t\t\t\t\t<Mask />\n\t\t\t\t\t<Navbar />\n\t\t\t\t\t<Player />\n\t\t\t\t\t<Result />\n\t\t\t\t</AppContextProvider>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}